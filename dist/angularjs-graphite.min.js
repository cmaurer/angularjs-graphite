window.ngGraphite={},window.ngGraphite.i18n={};var ngGraphiteProviders=angular.module("ngGraphite.providers",[]),ngGraphiteFactories=angular.module("ngGraphite.factories",[]),ngGraphiteServices=angular.module("ngGraphite.services",[]);angular.module("ngGraphite",["ngGraphite.providers","ngGraphite.factories","ngGraphite.services"]);var TIME_FORMAT_REGEX={relativeTimeRegEx:/(now|\-\d.[s]?[mion]?[w]?[mon]?[d]?[y]?)/,hhMmYyMmDdRegEx:/(([012][0-9])\:([0-5][0-9])\_([0-3][0-9])([0-1][0-9])([1-3][0-9]))/,yyyyMmDdRegEx:/(([2][01][012][0-9])([01][0-9])([01][0-9]))/,mmDdYyRegEx:/(([01][0-9]))\/([0-3][0-9])\/([0123][0-9])/},Parser=function(options){"use strict";this.options=options};Parser.prototype={constructor:Parser,parse:function(value){"use strict";return TIME_FORMAT_REGEX.relativeTimeRegEx.test(value)?this.parseRelativeTime(value):this.parseAbsoluteTime(value)},parseRelativeTime:function(){"use strict";return 0},parseAbsoluteTime:function(){"use strict";return 0}},ngGraphiteServices.factory("GraphiteDateParser",function(){"use strict";return new Parser({})}),ngGraphiteProviders.provider("Graphite",function(){"use strict";var defaultMethod="GET";this.setDefaultMethod=function(method){defaultMethod=method};var defaultProtocol="http";this.setDefaultProtocol=function(protocol){defaultProtocol=protocol};var defaultHost="localhost";this.setDefaultHost=function(host){defaultHost=host};var defaultPort=80;this.setDefaultPort=function(port){defaultPort=port};var defaultFormat="json";this.setDefaultFormat=function(format){defaultFormat=format};var defaultPath="/render";this.setDefaultPath=function(path){defaultPath=path};var defaultFrom="-24h";this.setDefaultFrom=function(from){defaultFrom=from};var defaultUntil="now";this.setDefaultUntil=function(until){defaultUntil=until},this.buildUrl=function(path,targets,from,until){path||(path=defaultPath),from||(from=defaultFrom),until||(until=defaultUntil);var urlStr=defaultProtocol+"://"+defaultHost+":"+defaultPort+path+"?format="+defaultFormat+"&from="+from+"&until="+until;return targets&&targets.forEach(function(target){urlStr=urlStr+"&target="+target}),urlStr},this.$get=function(){return{buildUrl:function(path,targets,from,until){path||(path=defaultPath),from||(from=defaultFrom),until||(until=defaultUntil);var urlStr=defaultProtocol+"://"+defaultHost+":"+defaultPort+path+"?format="+defaultFormat+"&from="+from+"&until="+until;return targets&&targets.forEach(function(target){urlStr=urlStr+"&target="+target}),urlStr}}}}),ngGraphiteFactories.factory("GraphiteDataParser",function(){"use strict";return{rawToJson:function(rawData){var splitLine,jsonObj,metaData,startTimestamp,endTimestamp,seriesStep,response=[];return rawData.split(/\n/g).forEach(function(rawDataLine){rawDataLine&&(jsonObj={target:"",datapoints:[]},splitLine=rawDataLine.split(/\|/),metaData=splitLine[0].split(/\,/),jsonObj.target=metaData[0],startTimestamp=+metaData[1],endTimestamp=+metaData[2],seriesStep=+metaData[3],splitLine[1].split(/\,/).forEach(function(data){jsonObj.datapoints.push([data,startTimestamp]),startTimestamp+=seriesStep}),response.push(jsonObj))}),response},jsonToRaw:function(){var raw="";return raw}}}),ngGraphiteFactories.factory("GraphiteTargetBuilder",function(){"use strict";function buildResult(value,strs){var rslts=[],filteredResults=[];strs.forEach(function(str,strsIdx){str.values.map(function(d){0===strsIdx?rslts.push(value.replace(str.pattern,d)):rslts.map(function(rslt){return rslt.replace(str.pattern,d)}).forEach(function(r){rslts.push(r)})})});var patterns=strs.map(function(d){return d.pattern});return patterns.forEach(function(p){rslts=rslts.filter(function(d){return-1===d.indexOf(p)})}),rslts.forEach(function(d){-1===filteredResults.indexOf(d)&&filteredResults.push(d)}),filteredResults}function buildValueList(value){var strs=[];return value.match(valueListRegex).forEach(function(match){strs.push({values:match.replace("{","").replace("}","").split(","),str:value,pattern:match})}),strs}function buildCharacterRange(value){var nums,strs=[];return value.match(characterRangeRegex).forEach(function(match){var range=match.replace("[","").replace("]","").split("-");if(isNaN(range[0]))strs.push(alpha.indexOf(range[0])>-1?{values:alpha.slice(alpha.indexOf(range[0]),alpha.indexOf(range[1])+1),str:value,pattern:match}:{values:ALPHA.slice(ALPHA.indexOf(range[0]),ALPHA.indexOf(range[1])+1),str:value,pattern:match});else{nums=[];for(var i=+range[0];i<+range[1]+1;i++)nums.push(i);strs.push({values:nums,str:value,pattern:match})}}),strs}function buildCharacterList(value){var range,strs=[],vals=[];return value.match(characterListRegex).forEach(function(match){range=match.replace("[","").replace("]",""),vals=[];for(var i=0;i<range.length;i++)vals.push(range[i]);strs.push({values:vals,str:value,pattern:match})}),strs}var allPatternsRegex=/(\[[0-9a-zA-Z]*\])|(\[([a-zA-Z]*\-[a-zA-z]*)?([0-9]*\-[0-9]*)?\])|\{([\w\d\,]*)\}/g,characterListRegex=/(\[[0-9a-zA-Z]*\])/g,characterRangeRegex=/(\[([a-zA-Z]*\-[a-zA-Z]*)?([0-9]*\-[0-9]*)?\])/g,valueListRegex=/\{([\w\d\,]*)\}/g,alpha=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"],ALPHA=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"];return{build:function(value){function addToStrArray(str){strs.push(str)}for(var arr,strs=[],origValue=value.slice(0);null!==(arr=allPatternsRegex.exec(value));){var token=arr[0].slice(0);null!==token.match(characterListRegex)?buildCharacterList(token).forEach(addToStrArray):null!==token.match(characterRangeRegex)?buildCharacterRange(token).forEach(addToStrArray):null!==token.match(valueListRegex)?buildValueList(token).forEach(addToStrArray):console.log("token not matched",token)}return buildResult(origValue,strs)},buildAll:function(){return[]}}}),ngGraphiteServices.factory("GraphiteService",["$q",function(){"use strict";var getAllMetricNamesBulk=function(){},findAllMetricNames=function(){},findMetricsAt=function(){};return{findAllMetricNames:findAllMetricNames,findMetricsAt:findMetricsAt,getAllMetricNamesBulk:getAllMetricNamesBulk}}]);